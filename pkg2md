#!/usr/bin/env node

'use strict';

var cli = require('cli');
var path = require('path');
var fs = require('fs');
var constants = require('./lib/constants');
var PkgToMd = require('./lib/pkg-to-md');
//var CliLogger = require('./lib/cli-logger');
var cliLogger = require('./lib/logger');
var commander = require('commander');
var colors = require('colors');


///////////////////////////////////////////////////////////////////////////////
// CLI INIT
///////////////////////////////////////////////////////////////////////////////

var name = path.basename(__filename);

/**
 * How to use the CLI.
 * @type {string}
 * @private
 */
var usage = name + ' [PKG-IN-FILE (default: package.json)] [MD-OUT-FILE (default: README.md)] [OPTIONS]'; // TODO usage!!!

/**
 * The path to package.json.
 * @type {string}
 * @private
 */
var packagePath = __dirname + '/package.json';

var packageData = JSON.parse(fs.readFileSync(packagePath, constants.UTF8));

var sectionOrder = [];

function registerSectionOrderEvents(argNames) {
    argNames.forEach(function (argName) {
        commander.on(argName, createSectionOrderEventHandler(argName))
    });
}

function createSectionOrderEventHandler(argName) {
    return function (argValue) {
        //console.log('ARG ' + argName + ' PARSED: ' + argValue);
        sectionOrder.push(argName);
    }
}

// create the CLI parse options and parse
commander

// sugar!
    .version(name + ' v' + packageData.version + ' - ' + packageData.description, '-v, --version')
    .description(packageData.description)

    // general options
    .option('-I, --pkg <package>', 'the package input file [default: ' + constants.DEFAULT_PKG_FILE + ']', constants.DEFAULT_PKG_FILE)
    .option('-O, --md <markdown>', 'the Markdown output file [default: ' + constants.DEFAULT_MD_FILE + ']', constants.DEFAULT_MD_FILE)
    .option('-T, --title <name>', 'another title to use as main headline instead of module \'name\' (single word only!) [default: pkg.name]', packageData.name)
    // .option('-v, --validate', 'whether to validate the package.json file on input reading [default: false]')
    .option('-h, --headline <n>', 'the amount of basic headline indention: 1 => #, 2 => ##, ... [default: 1]', 1)
    .option('-f, --force', 'force overwriting of existing output files on write phase: if an existing file is not overwritten (which is default), then the generated Markdown is simply appended [default: false]')

    // log options
    .option('-L, --level <level>', 'log level for CLI output (info|debug|trace|warn|error|silent) [default: info]', /^(info|debug|trace|warn|error|silent)$/i, 'info')
    .option('--no-color', 'whether to print the log colorized [default: true]')
    .option('-S, --silent', 'whether to suppress any log [default: false]')

    // assembled sections
    .option('-t, --tests', 'whether to print the test execution section \'scripts.test\' [default: false]')
    .option('-i, --inst', 'whether to print the installation how-to [default: false]')

    // concrete properties
    .option('-s, --staff', 'whether to print the project\'s staff: \'author\', \'contributors\' and \'maintainers\' [default: false]')
    .option('--no-desc', 'whether to print the \'description\' [default: true]')
    .option('-l, --lic', 'whether to print the \'license\' [default: false]')
    .option('-m, --main', 'whether to print the \'main\' executable file [default: false]')
    .option('--no-ver', 'whether to print the \'version\' in title headline [default: true]')
    .option('-d, --deps', 'whether to print the module library dependencies: \'dependencies\', \'devDependencies\', \'bundle(d)Dependencies\', \'optionalDependencies\', \'peerDependencies\' [default: false]')
    .option('-r, --repo', 'whether to print the \'repository\' [default: false]')
    .option('-k, --keywords', 'whether to print the \'keywords\' [default: false]')
    .option('-b, --bin', 'whether to print the binary mappings \'bin\' [default: false]')
    .option('-o, --os', 'whether to print the OS support \'os\' [default: false]')
    .option('-c, --cpu', 'whether to print the CPU support \'cpu\' [default: false]')
    .option('-C, --config', 'whether to print the NPM \'config\' [default: false]')
    .option('-S, --scripts', 'whether to print the NPM \'scripts\' [default: false]')
    .option('-e, --engines', 'whether to print the supported \'engines\' [default: false]')

    // special event treatment for headline parsing, because commander does not allow
    // all 4 args in option() call (3rd arg is either a parse function or default value!)
    .on('headline', function (arg) {
        console.log('ARG headline PARSED: ' + arg);
        commander.headline = parseInt(arg);
    });

registerSectionOrderEvents(['tests', 'inst', 'staff', 'lic', 'main', 'deps', 'keywords', 'bin', 'repo', 'os', 'cpu', 'config', 'scripts', 'engines']);
commander.parse(process.argv);

// set the log level to winston from the commander options
//var level = commander.level.toLowerCase();
var logger = new cliLogger.Logger(cliLogger.createConfig(commander.level.toLowerCase(), name, commander.color));
logger.debug('CLI-logger initialized');
//     new CliLogger({
//     level: commander.level,
//     noColor: !commander.color,
//     silent: commander.silent
// });

//console.log('OPTIONS::: ' + JSON.stringify(commander.options, null, 4));


logger.trace('ORDER::: ' + JSON.stringify(sectionOrder, null, 4));

// if (!process.argv.slice(2).length) {
//     commander.outputHelp(makeRed);
// }

/**
 * Colors the given `txt` red.
 * @param {string} txt - To color red.
 * @returns {string} - The red colored text.
 * @private
 */
function makeRed(txt) {
    return colors.red(txt); //display the help text in red on the console
}

// write MD
var pkgToMd = new PkgToMd(logger);
pkgToMd.writeMarkdown(commander, sectionOrder)
    .then(function (msg) {
        logger.info(msg);
    })
    .catch(function (err) {
        logger.error('////////////////////////////////////////////////////////////////////////////////');
        logger.error(err.stack);
        logger.error('////////////////////////////////////////////////////////////////////////////////');
        commander.outputHelp(commander.color ? makeRed : undefined);
    });
