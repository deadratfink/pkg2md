#!/usr/bin/env node

'use strict';

//var constants = require('./lib/constants.js');
const cli = require('cli');
const path = require('path');
const constants = require('./lib/constants');
const PkgToMd = require('./lib/pkg-to-md.js');
const pkgToMd = new PkgToMd(cli);

///////////////////////////////////////////////////////////////////////////////
// CLI INIT
///////////////////////////////////////////////////////////////////////////////

/**
 * How to use the CLI.
 * @type {string}
 * @private
 */
var usage = path.basename(__filename) + ' [PKG-FILE] [MD-FILE] [OPTIONS]';

/**
 * The path to package.json.
 * @type {string}
 * @private
 */
var packagePath = __dirname + '/package.json';

/**
 * The options description for parsing the command line input, must be an object with opts defined like:
 * ```
 * long_tag: [short_tag, description, value_type, default_value];
 * ```
 * @type {{origin: *[], target: *[], src: string[], dest: *[], indent: *[], force: string[], imports: string, exports: string}}
 * @private
 */
var options = {

    // general options
    title:  [ 't', 'Another title to use as main headline instead of module name.', 'string', false ],
    validate:  [ 'a', 'Whether to validate package.json'],
    headline: [ 'e', 'The amount of basic headline depth: 1 => #, 2 => ##, ...', 'number', 1 ],
    force:   [ 'f', 'Force overwriting of existing output files on write phase. When an existing file is not overwritten (which is default), then the generated Markdown is simply appended.' ],

    // assembled sections
    tests: [ 'q', 'Whether to print the tests section (scripts.test).', 'boolean', true ],
    inst: [ 'n', 'Whether to print the installation how to.', 'boolean', true ],
    staff:  [ 's', 'Whether to print the project\'s staff (author, contributors and maintainers.' ],

    // concrete properties
    desc: [ 'd', 'Whether to print the description.', 'boolean', true ],
    lic: [ 'l', 'Whether to print the license.', 'boolean', true ],
    main: [ 'm', 'Whether to print the main executable file.' ],
    ver: [ 'v', 'Whether to print the version in title headline (version).', 'boolean', true ],
    deps: [ 'p', 'Whether to print the dependencies.', 'boolean', true ],
    devDeps: [ 'dp', 'Whether to print the devDependencies.', 'boolean', true ],
    bundledDeps: [ 'bp', 'Whether to print the bundleDependencies/bundledDependencies.', 'boolean', true ],
    optDeps: [ 'op', 'Whether to print the optionalDependencies.', 'boolean', true ],
    peerDeps: [ 'pp', 'Whether to print the peerDependencies.', 'boolean', true ],
    repo:  [ 'r', 'Whether to print the repository.' ],
    keywds:  [ 'k', 'Whether to print the keywords.' ],
    bin:  [ 'b', 'Whether to print the binary mappings (bin).' ],
    os:  [ 'o', 'Whether to print the OS support (os).' ],
    cpu:  [ 'u', 'Whether to print the CPU support (cpu).' ],
    config:  [ 'c', 'Whether to print the NPM config.' ],
    scripts:  [ 'i', 'Whether to print the NPM scripts.' ],
    engines:  [ 'g', 'Whether to print the engines.' ]
};

/**
 * The main entry callback. When calling cli.main() this receives the `options`
 * given on CLI, does the transformation with these options and prints the
 * result to the CLI.
 * @param {object} args    - The first (optional) argument is the input file
 *                           (`args[0]`), the second (optional) argument is the
 *                           output file (`args[0]`).
 * @param {object} options - The options set on CLI.
 * @private
 */
function main(args, options) {

    // read file args and set to options

    if (args.length > 0) {
        cli.debug('input file: ' + args[0]);
        options.pkg = args[0];
    } else {
        options.pkg = constants.DEFAULT_PKG_FILE;
        cli.debug('input file not specified, using default: ' + options.pkg);
    }
    if (args.length > 1) {
        cli.debug('output file: ' + args[1]);
        options.md = args[1];
    } else {
        options.md = constants.DEFAULT_MD_FILE;
        cli.debug('output file not specified, using default: ' + options.md);
    }

    // write MD

    return pkgToMd.writeMarkdown(options)
        .then(function (msg) {
            cli.info(msg);
        })
        .catch(function (err) {
            cli.error('////////////////////////////////////////////////////////////////////////////////');
            cli.error(err.stack);
            cli.error('////////////////////////////////////////////////////////////////////////////////');
            cli.getUsage(1);
        });
}

/**
 * Init the CLI instance.
 */
cli.width = 120;
cli.setUsage(usage);
cli.setApp(packagePath);
cli.enable('version', 'status', 'timeout');
cli.parse(options);
cli.main(main);
