#!/usr/bin/env node

'use strict';

//var constants = require('./lib/constants.js');
const cli = require('cli');
const path = require('path');
const constants = require('./lib/constants');
const PkgToMd = require('./lib/pkg-to-md.js');
const pkgToMd = new PkgToMd(cli);

///////////////////////////////////////////////////////////////////////////////
// CLI INIT
///////////////////////////////////////////////////////////////////////////////

/**
 * How to use the CLI.
 *
 * @type {string}
 * @private
 */
var usage = path.basename(__filename) + ' [PKG-FILE] [MD-FILE] [OPTIONS]';

/**
 * The path to package.json.
 *
 * @type {string}
 * @private
 */
var packagePath = __dirname + '/package.json';

/**
 * The options description for parsing the command line input, must be an object with opts defined like:
 * ```
 * long_tag: [short_tag, description, value_type, default_value];
 * ```
 * @type {{origin: *[], target: *[], src: string[], dest: *[], indent: *[], force: string[], imports: string, exports: string}}
 * @private
 */
var options = {
    title:  [ 't', 'Another title to use as main headline instead of module name.', 'string', false ],
    validate:  [ 'a', 'Whether to validate package.json', 'boolean', true ],
    headline: [ 'e', 'The amount of basic headline depth: 1 => #, 2 => ##, ...', 'number', 1 ],
    desc: [ 'd', 'Whether to print the description.', 'boolean', true ],
    inst: [ 'i', 'Whether to print the installation how to.', 'boolean', true ],
    lic: [ 'l', 'Whether to print the license.', 'boolean', true ],
    deps: [ 'p', 'Whether to print the dependencies.', 'boolean', true ],
    devDeps: [ 'dp', 'Whether to print the devDependencies.', 'boolean', true ],
    bundledDeps: [ 'bp', 'Whether to print the bundledDependencies.', 'boolean', true ],
    optDeps: [ 'op', 'Whether to print the optionalDependencies.', 'boolean', true ],
    peerDeps: [ 'pp', 'Whether to print the peerDependencies.', 'boolean', true ],


    //origin:  [ 'o', 'The conversion origin: [ ' + constants.JS + ' | ' + constants.JSON + ' | ' + constants.YAML + ' ].', 'string', constants.DEFAULT_OPTIONS.origin ],
    //target:  [ 't', 'The conversion target: [ ' + constants.JS + ' | ' + constants.JSON + ' | ' + constants.YAML + ' ].', 'string', constants.DEFAULT_OPTIONS.target ],
    //src:     [ 's', 'The absolute/relative input file path.', 'path'],
    //dest:    [ 'd', 'The absolute/relative output file path. When this options is ommited then the output file is stored relative to the input file (same base name but with another extension if type differs). If input and output type are the same then the file overwriting is handled depending on the \'--force\' value!', 'path', constants.DEFAULT_OPTIONS.dest],
    //indent:  [ 'i', 'The indention for pretty-print: 1 - 8.', 'int', constants.DEFAULT_INDENT ],
    force:   [ 'f', 'Force overwriting of existing output files on write phase. When an existing file is not overwritten (which is default), then the generated Markdown is simply appended.' ],
    //imports: [ 'm', 'Define a \'module.exports[.identifier] = \' identifier (to read from JS _source_ file only, must be a valid JS identifier!).', 'string', constants.DEFAULT_OPTIONS.imports ],
    //exports: [ 'x', 'Define a \'module.exports[.identifier] = \' identifier (for usage in JS destination file only, must be a valid JS identifier!).', 'string', constants.DEFAULT_OPTIONS.exports ]
    tests: [ 's', 'Whether to print the tests section.', 'boolean', true ],
    ver: [ 'v', 'Whether to print the version in title headline.', 'boolean', true ]
};

/**
 * The main entry callback. When calling cli.main() this receives the `options`
 * given on CLI, does the transformation with these options and prints the
 * result to the CLI.
 *
 * @param {object} args    - The first (optional) argument is the input file
 *                           (`args[0]`), the second (optional) argument is the
 *                           output file (`args[0]`).
 * @param {object} options - The options set on CLI.
 * @private
 */
function main(args, options) {

    // read file args and set to options

    if (args.length > 0) {
        cli.debug('input file: ' + args[0]);
        options.pkg = args[0];
    } else {
        options.pkg = constants.DEFAULT_PKG_FILE;
        cli.debug('input file not specified, using default: ' + options.pkg);
    }
    if (args.length > 1) {
        cli.debug('output file: ' + args[1]);
        options.md = args[1];
    } else {
        options.md = constants.DEFAULT_MD_FILE;
        cli.debug('output file not specified, using default: ' + options.md);
    }

    // write MD

    return pkgToMd.writeMarkdown(options)
        .then(function (msg) {
            cli.info(msg);
        })
        .catch(function (err) {
            cli.error('////////////////////////////////////////////////////////////////////////////////');
            cli.error(err.stack);
            cli.error('////////////////////////////////////////////////////////////////////////////////');
            cli.getUsage(1);
        });
}

/**
 * Init the CLI instance.
 */
cli.width = 120;
cli.setUsage(usage);
cli.setApp(packagePath);
cli.enable('version', 'status', 'timeout');
cli.parse(options);
cli.main(main);
